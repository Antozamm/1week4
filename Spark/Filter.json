{"paragraphs":[{"text":"\n%md\n## FILTER signature #1\nLa funzione filter ha diverse signature, questo significa che la funzione puà essere chiamata con diversi parametri.\n\nLa prima funzione è:\n`def filter(func: (T) ⇒ Boolean): Dataset[T]`\n\nIn questo caso devo passare una funzione che ritorna un valore di tipo boolean. \n\nLa funzione può essere definita esplicitamente (def funzione(A): Boolean) oppure può essere una funzione anonima. \n\n#### Esempio #1: \n\nusiamo una funzione anonima. La funzione che passo è: `x => x>20` in cui ogni elemento viene confrontato con il numero 20. Il risultato è ovviamente **true** o **false**.","user":"anonymous","dateUpdated":"2020-01-26T00:06:37+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>FILTER signature #1</h2>\n<p>La funzione filter ha diverse signature, questo significa che la funzione puà essere chiamata con diversi parametri.</p>\n<p>La prima funzione è:<br/><code>def filter(func: (T) ⇒ Boolean): Dataset[T]</code></p>\n<p>In questo caso devo passare una funzione che ritorna un valore di tipo boolean. </p>\n<p>La funzione può essere definita esplicitamente (def funzione(A): Boolean) oppure può essere una funzione anonima. </p>\n<h4>Esempio #1:</h4>\n<p>usiamo una funzione anonima. La funzione che passo è: <code>x =&gt; x&gt;20</code> in cui ogni elemento viene confrontato con il numero 20. Il risultato è ovviamente <strong>true</strong> o <strong>false</strong>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579798137486_1083362891","id":"20200123-174857_739726674","dateCreated":"2020-01-23T17:48:57+0100","dateStarted":"2020-01-26T00:06:37+0100","dateFinished":"2020-01-26T00:06:37+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:169"},{"text":"spark.range(1, 25).filter( x => x>20  ).show","user":"anonymous","dateUpdated":"2020-01-23T18:10:36+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+\n| id|\n+---+\n| 21|\n| 22|\n| 23|\n| 24|\n+---+\n\r\n"}]},"apps":[],"jobName":"paragraph_1579798219565_6257722","id":"20200123-175019_1616000185","dateCreated":"2020-01-23T17:50:19+0100","dateStarted":"2020-01-23T18:09:39+0100","dateFinished":"2020-01-23T18:09:39+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:170"},{"text":"%md\n#### Esempio #2\n\nPosso applicare la funzione di filter ad ogni elemento della riga usando la notazione **x._k** per indicare il k-esimo elemento di x ","user":"anonymous","dateUpdated":"2020-01-25T22:32:51+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Esempio #2</h4>\n<p>Posso applicare la funzione di filter ad ogni elemento della riga usando la notazione <strong>x._k</strong> per indicare il k-esimo elemento di x</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579799978749_921168973","id":"20200123-181938_7348249","dateCreated":"2020-01-23T18:19:38+0100","dateStarted":"2020-01-25T22:32:51+0100","dateFinished":"2020-01-25T22:32:51+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:171"},{"text":"val df = spark.range(1,25).map(x => (x, x*x))\ndf.filter(a => a._1>10).show(5)","user":"anonymous","dateUpdated":"2020-01-25T22:33:05+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+\n| _1| _2|\n+---+---+\n| 11|121|\n| 12|144|\n| 13|169|\n| 14|196|\n| 15|225|\n+---+---+\nonly showing top 5 rows\n\r\ndf: org.apache.spark.sql.Dataset[(Long, Long)] = [_1: bigint, _2: bigint]\n"}]},"apps":[],"jobName":"paragraph_1579799371648_182316161","id":"20200123-180931_1536864294","dateCreated":"2020-01-23T18:09:31+0100","dateStarted":"2020-01-25T22:33:05+0100","dateFinished":"2020-01-25T22:33:27+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:172"},{"text":"%md\n#### Esempio #3\n\nDefiniamo la funzione esplicitamente.","user":"anonymous","dateUpdated":"2020-01-23T22:27:07+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Esempio #3</h4>\n<p>Definiamo la funzione esplicitamente.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579800440169_-1620595371","id":"20200123-182720_995192217","dateCreated":"2020-01-23T18:27:20+0100","dateStarted":"2020-01-23T22:27:07+0100","dateFinished":"2020-01-23T22:27:07+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:173"},{"text":"def funz1(a: (Long, Long)): Boolean = a._2>10\n\nval df = spark.range(1,25).map(x => (x.toLong, (x*x).toLong))  \n\ndf.filter(funz1 _).show(5)","user":"anonymous","dateUpdated":"2020-01-23T22:22:18+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+\n| _1| _2|\n+---+---+\n|  4| 16|\n|  5| 25|\n|  6| 36|\n|  7| 49|\n|  8| 64|\n+---+---+\nonly showing top 5 rows\n\r\nfunz1: (a: (Long, Long))Boolean\r\ndf: org.apache.spark.sql.Dataset[(Long, Long)] = [_1: bigint, _2: bigint]\n"}]},"apps":[],"jobName":"paragraph_1579800465294_2086771047","id":"20200123-182745_901379871","dateCreated":"2020-01-23T18:27:45+0100","dateStarted":"2020-01-23T22:22:18+0100","dateFinished":"2020-01-23T22:22:19+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"text":"%md\n## FILTER signature #2\n\nVediamo la seconda signature \n\n`def filter(conditionExpr: String): Dataset[T]`\n\nNon è molto chiaro cosa sia *conditionExpr*, però si capisce che è una stringa, quindi la condizione deve essere espressa come stringa.","user":"anonymous","dateUpdated":"2020-01-26T01:37:29+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>FILTER signature #2</h2>\n<p>Vediamo la seconda signature </p>\n<p><code>def filter(conditionExpr: String): Dataset[T]</code></p>\n<p>Non è molto chiaro cosa sia <em>conditionExpr</em>, però si capisce che è una stringa, quindi la condizione deve essere espressa come stringa.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579799864919_-1006949131","id":"20200123-181744_150597248","dateCreated":"2020-01-23T18:17:44+0100","dateStarted":"2020-01-26T01:37:29+0100","dateFinished":"2020-01-26T01:37:29+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"text":"val df = spark.range(1,25).map(x => (x.toLong, (x*x).toLong)).toDF(\"numero\", \"quadrato\")\n\ndf.filter(\"quadrato > 100\").show(5)","user":"anonymous","dateUpdated":"2020-01-23T22:32:07+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------+\n|numero|quadrato|\n+------+--------+\n|    11|     121|\n|    12|     144|\n|    13|     169|\n|    14|     196|\n|    15|     225|\n+------+--------+\nonly showing top 5 rows\n\r\ndf: org.apache.spark.sql.DataFrame = [numero: bigint, quadrato: bigint]\n"}]},"apps":[],"jobName":"paragraph_1579814875536_-2146570086","id":"20200123-222755_819949606","dateCreated":"2020-01-23T22:27:55+0100","dateStarted":"2020-01-23T22:32:07+0100","dateFinished":"2020-01-23T22:32:07+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:176"},{"text":"%md\r\n## FILTER signature #3\r\n\r\nInfine l'ultima signature:\r\n\r\n`def filter(condition: Column): Dataset[T]`\r\n\r\nQuesto metodo si aspetta una colonna come condizione.","user":"anonymous","dateUpdated":"2020-01-25T22:35:22+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>FILTER signature #3</h2>\n<p>Infine l&rsquo;ultima signature:</p>\n<p><code>def filter(condition: Column): Dataset[T]</code></p>\n<p>Questo metodo si aspetta una colonna come condizione.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579815102549_1454398456","id":"20200123-223142_33318660","dateCreated":"2020-01-23T22:31:42+0100","dateStarted":"2020-01-25T22:35:22+0100","dateFinished":"2020-01-25T22:35:22+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"text":"df.filter($\"numero\">20).show","user":"anonymous","dateUpdated":"2020-01-24T00:58:52+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------+\n|numero|quadrato|\n+------+--------+\n|    21|     441|\n|    22|     484|\n|    23|     529|\n|    24|     576|\n+------+--------+\n\r\n"}]},"apps":[],"jobName":"paragraph_1579823772330_1878251834","id":"20200124-005612_2006146603","dateCreated":"2020-01-24T00:56:12+0100","dateStarted":"2020-01-24T00:58:52+0100","dateFinished":"2020-01-24T00:58:52+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:178"},{"text":"%md\noppure nel formato che utilizza i metodi della classe org.apache.spark.sql.Column:\n-- **gt**: greater than\n-- **lt**: less than\n-- **equalsTo**: equal \n-- **notequal**: not equal \n-- **leq**: less than or equal\n-- **geq**: greater than or equal\ne altre che si possono trovare nella [API di Column](https://spark.apache.org/docs/latest/api/scala/#org.apache.spark.sql.Column)","user":"anonymous","dateUpdated":"2020-01-25T22:36:02+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>oppure nel formato che utilizza i metodi della classe org.apache.spark.sql.Column:<br/>&ndash; <strong>gt</strong>: greater than<br/>&ndash; <strong>lt</strong>: less than<br/>&ndash; <strong>equalsTo</strong>: equal<br/>&ndash; <strong>notequal</strong>: not equal<br/>&ndash; <strong>leq</strong>: less than or equal<br/>&ndash; <strong>geq</strong>: greater than or equal<br/>e altre che si possono trovare nella <a href=\"https://spark.apache.org/docs/latest/api/scala/#org.apache.spark.sql.Column\">API di Column</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579823932101_-1883378282","id":"20200124-005852_1895055567","dateCreated":"2020-01-24T00:58:52+0100","dateStarted":"2020-01-25T22:36:02+0100","dateFinished":"2020-01-25T22:36:02+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:179"},{"text":"df.filter($\"quadrato\".equalTo(121)).show","user":"anonymous","dateUpdated":"2020-01-24T01:08:14+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------+\n|numero|quadrato|\n+------+--------+\n|    11|     121|\n+------+--------+\n\r\n"}]},"apps":[],"jobName":"paragraph_1579824118310_500827123","id":"20200124-010158_143023129","dateCreated":"2020-01-24T01:01:58+0100","dateStarted":"2020-01-24T01:08:14+0100","dateFinished":"2020-01-24T01:08:14+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:180"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579824141803_-833998743","id":"20200124-010221_1543259161","dateCreated":"2020-01-24T01:02:21+0100","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:181"}],"name":"Filter","id":"2F24ZCF8A","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}